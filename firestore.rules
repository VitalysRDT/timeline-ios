rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function gameExists(gameId) {
      return exists(/databases/$(database)/documents/games/$(gameId));
    }
    
    function isPlayer(gameId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid));
    }
    
    function isInLobby(gameId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.status == 'lobby';
    }
    
    function isRunning(gameId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.status == 'running';
    }
    
    function isRoundActive(gameId, roundIndex) {
      let round = get(/databases/$(database)/documents/games/$(gameId)/rounds/$(roundIndex));
      return round.data.roundStartsAt <= request.time && 
             round.data.roundEndsAt >= request.time && 
             !round.data.resolved;
    }
    
    // Games collection
    match /games/{gameId} {
      allow read: if true; // Allow all reads for development
      
      allow create: if isAuthenticated() && 
        request.resource.data.status == 'lobby' &&
        request.resource.data.hostId == request.auth.uid;
      
      allow update: if isAuthenticated(); // Allow all authenticated updates for development
      allow delete: if isAuthenticated() && resource.data.hostId == request.auth.uid;
    }
    
    // Players collection
    match /games/{gameId}/players/{playerId} {
      allow read: if true; // Allow all reads for development
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Rounds collection
    match /games/{gameId}/rounds/{roundId} {
      allow read: if true; // Allow all reads for development
      allow create: if isAuthenticated() && isPlayer(gameId);
      allow update: if isAuthenticated() && isPlayer(gameId);
      allow delete: if false; // No deletes
    }
    
    // Submissions collection
    match /games/{gameId}/submissions/{submissionId} {
      allow read: if true; // Allow all reads for development
      
      allow create: if isAuthenticated() && isPlayer(gameId);
      
      allow update: if isAuthenticated() && isPlayer(gameId);
      allow delete: if false; // No deletes
    }
    
    // Time calibration (temporary documents for server time sync)
    match /time_calibration/{docId} {
      allow create: if isAuthenticated();
      allow read: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}